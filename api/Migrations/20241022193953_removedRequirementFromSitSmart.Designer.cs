// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241022193953_removedRequirementFromSitSmart")]
    partial class removedRequirementFromSitSmart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.DistanceObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<string>("sitSmartDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("sitSmartDeviceId");

                    b.ToTable("DistanceObjects");
                });

            modelBuilder.Entity("API.Models.Movement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("XValue")
                        .HasColumnType("integer");

                    b.Property<int>("YValue")
                        .HasColumnType("integer");

                    b.Property<int>("ZValue")
                        .HasColumnType("integer");

                    b.Property<string>("sitSmartDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("sitSmartDeviceId");

                    b.ToTable("MovementObjects");
                });

            modelBuilder.Entity("API.Models.SitSmartDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SitSmartDevice");
                });

            modelBuilder.Entity("API.Models.TempHumidity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("Temp")
                        .HasColumnType("integer");

                    b.Property<string>("sitSmartDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("sitSmartDeviceId");

                    b.ToTable("TempHumidityObjects");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RealPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.UserSitSmart", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("deviceId")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("deviceId");

                    b.HasIndex("userId");

                    b.ToTable("UserSitSmart");
                });

            modelBuilder.Entity("API.Models.DistanceObject", b =>
                {
                    b.HasOne("API.Models.SitSmartDevice", "sitSmartDevice")
                        .WithMany("DistanceObjects")
                        .HasForeignKey("sitSmartDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sitSmartDevice");
                });

            modelBuilder.Entity("API.Models.Movement", b =>
                {
                    b.HasOne("API.Models.SitSmartDevice", "sitSmartDevice")
                        .WithMany("Movements")
                        .HasForeignKey("sitSmartDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sitSmartDevice");
                });

            modelBuilder.Entity("API.Models.TempHumidity", b =>
                {
                    b.HasOne("API.Models.SitSmartDevice", "sitSmartDevice")
                        .WithMany("TempHumiditys")
                        .HasForeignKey("sitSmartDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sitSmartDevice");
                });

            modelBuilder.Entity("API.Models.UserSitSmart", b =>
                {
                    b.HasOne("API.Models.SitSmartDevice", "device")
                        .WithMany("Users")
                        .HasForeignKey("deviceId");

                    b.HasOne("API.Models.User", "user")
                        .WithMany("SitSmarts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.SitSmartDevice", b =>
                {
                    b.Navigation("DistanceObjects");

                    b.Navigation("Movements");

                    b.Navigation("TempHumiditys");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("SitSmarts");
                });
#pragma warning restore 612, 618
        }
    }
}
